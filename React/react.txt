
:: Basics ::

# What is React ?
 React is a JavaScript library used for building user interfaces,
Primmarily used for building single-page applications. It’s maintained by Facebook
and It follows component-based architecture for building reusable UI component.

# What are the major features of React?
 The major features of React are:
Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive.
Supports server-side rendering which is useful for Search Engine Optimizations(SEO).
Follows Unidirectional or one-way data flow or data binding.
Uses reusable/composable UI components to develop the view.

# How does react works ?
 React creates a virtual-DOM in memory.
Insted of manipulating browsers DOM (Real-DOM) directly, React creates virtual-DOM in memory.
Where it does all the nessessary manipulating, before making the changes in the browsers DOM (Real-DOM).

When something changes, React compares the two virtual DOMs to see what's different. It then updates only the
parts that have changed in the real DOM, rather than updating the entire webpage.

# Why we use React js ?
 The main objective of react is to develop UI that improve speed of the apps.
It uses virtual-dom which improve performance of the app. Virtual-DOM is faster than Real-DOM.

# What is a Single Page Application (SPA)?
 A Single Page Application is a web application that loads a single HTML page and
dynamically updates the content on the page as the user interacts with it, without 
reloading the entire page.

# What is JSX ?
 React uses JSX (JavaScript XML) for defining the UI:
JSX stands for JavaScript XML.
JSX allows us to write HTML in JavaScript, 
JSX makes it easier to write and add HTML in React.
and place them in the DOM without using functions like appendChild() or createElement(). [Optional]
Behind the scenes, JSX gets transpiled into JavaScript using tools like Babel.

#  What are React Fragments?
 React Fragments allows us to group a list of children without adding extra nodes to the DOM.
To prevent unnecessorily adding extra nodes to the DOM.

# Why fragments are better than container divs ?
 Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.


# What is the Virtual DOM ?
 The Virtual DOM (VDOM) is a lightweight, in-memory representation of the actual DOM that React uses to optimize the rendering process. 
Instead of directly manipulating the real DOM, React creates a virtual copy of the DOM, updates the virtual DOM when changes occur, 
and then compares it to the previous version using a process called Reconciliation. 
After identifying the differences, only the necessary updates are applied to the real DOM, which avoid unnecessary re-renders and improving performance.
(A new virtual DOM is created after every rerender).

# What is real DOM ?
 The Real DOM is the actual Document Object Model, (a tree like structure representation of the UI elements in the browser). 
The actual DOM provided by the browser. It is used to render content on the screen.
Whenever the UI needs to be updated, the Real DOM is directly manipulated, which can be slow because it requires re-rendering the entire DOM,
which can lead to performance issue.

# Difference between Virtual and Real-DOM ?
 It is the copy of the Real DOM which is use to manage updates efficiently.
It allows React to manage updates more efficiently. When the state or props of a component change, 
React first updates the Virtual DOM instead of the Real DOM. 
It then uses a process called "reconciliation" to calculate the difference between the new Virtual DOM and the previous one. 
Finally, React updates only the necessary parts of the Real DOM.
This approach makes React faster because interacting with the Real DOM directly is expensive in terms of performance.

[ Example Scenario ::
 Imagine a list of 1000 items where only one item changes:
 Virtual DOM : React updates the corresponding Virtual DOM node and compares it with the previous version. 
 Only the specific Real DOM node for the changed item gets updated.
 Real DOM : If updated directly, the entire list might re-render, leading to slower performance.]

# What is Reconciliation ?
 Reconciliation is the process through which React updates the Browser DOM and makes React work faster. React use a diffing algorithm so that
component updates are predictable and faster. React would first calculate the difference between the real DOM and the copy of DOM (Virtual DOM) 
when there's an update of components. React stores a copy of Browser DOM which is called Virtual DOM. When we make changes or add data, 
React creates a new Virtual DOM and compares it with the previous one. This comparison is done by Diffing Algorithm. 
Now React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM
leaving the rest nodes as it is. This process is called Reconciliation.

# Diffing Algorithm: React uses a highly optimized diffing algorithm to compare the new Virtual DOM with the old one. This algorithm identifies changes (additions, updates, deletions) in terms of components, elements, and attributes.

# What is difference between element and component in React ?
Element :: 
 An Element is a simple object that describes what you want to show on the screen. 
It defines the structure of DOM nodes or other components. Elements can include other Elements in their properties. 
Once created, Elements cannot be changed. Creating a React Element is a straightforward and inexpensive operation.

:: Component ::

# What is Component ? 
 React applications are built using components:
Components are independent and reusable pieces of code.
Each component can maintain its own state and can receive data through props.
Components can be either class-based (older) or function-based (modern with hooks).

# Functional Component ?
Functional components are simpler functions that take props and return React elements (usually JSX).
Functional components can use hooks to manage state and side effects.
Functional components are simpler and more straightforward compared to class components.
Unlike class components, functional components don’t use this.

# Functioanl components are stateless or statefull ?
 Initially, functional components were stateless, but with the introduction of React Hooks in React 16.8, they can now manage state and lifecycle logic.

# Advantages of functional component ?
 Simpler Code: Syntax is simple.
Performance: Performance is high as they don't involve complex lifecycle methods.
Hooks Integration: Hooks allow functional components to handle state and side effects effectively.

# What is a class component in React ?
A class component is a JavaScript class that extends the React.Component
class. It uses the render() method to dene the structure and appearance
of a React component. Class components can have their own state and
lifecycle methods.

# What is the difference between functional and class components ?
Functional components are simpler and easier to read and test compared to class components. 
They don't have their own state or lifecycle methods.
Class components, on the other hand, can manage their own state and have access to lifecycle methods
such as componentDidMount() and componentDidUpdate().

OR 

Functional Components: Simpler, stateless components defined as functions. They use hooks for state and side effects.
Class Components: More complex components with a render() method and lifecycle methods, used before hooks were introduced.

# When to use a Class Component over a Function Component ?
Functional components are preferred for simpler scenarios, while class components offer more features for complex state management and
lifecycle methods.

After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. 
Because you could use state, lifecycle methods and other features that were only available in class component present in function component too.

But even there are some reasons to use Class components over Function components like-
If the existing codebase is built using class components, it might make sense to continue using them for consistency and easier maintenance.

# What is State in React ?
 State is a built-in object in React that holds component-specific data. 
It represents the mutable values that can change over time.
When the state of a component changes, React re-renders the component to reflect the updated data.

#  What is props in React ?
 Props (short for properties) are used to pass data from a parent component to a child component. 
Props are read-only and cannot be modied by the child component. 
They are passed as attributes to the child component in JSX.

# Why you can't update props in React?
 In React, you cannot directly update props because they are read-only and passed from a parent component to a child component. 
Props are meant to be immutable to ensure a predictable and one-way data flow, which helps maintain component consistency and avoid unexpected behavior.

# What is the difference between state and props ?
 State can be changed over time.
Props are immutable.

# What is Lifting State Up in Reactjs ?
 lifting state up means Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, 
move it to their closest common parent, and then pass it down to them via props. 

That means if two child components share the same data from its parent, then move the state to parent instead of
maintaining local state in both of the child components.

# Explain how lists are created in React?
 Lists are essential for displaying dynamic content on a website. In React, 
you can create a list using the method of an array.

# What is the purpose of keys in React lists ?
 Keys are used in React lists to give each item a unique identier. 
They help React identify which items have changed, been added, or been removed in a list, 
improving performance and avoiding unnecessary re-rendering of components.

# What is the impact of indexes as keys?
 In React, using indexes as keys for list items is not ideal because they don’t uniquely represent the data. 
Index-based keys are unstable and can cause issues when items are added, removed, or reordered, leading to performance problems and unexpected bugs. 
For better performance and maintainability, it’s recommended to use unique identifiers (e.g., IDs) as keys, ensuring stable and predictable behavior.

# What are controlled components?
 In React, controlled components are components where the React state controls the form elements' values. 
This means the form element's data is handled by the component's state.
Here we use event handlers like onChange to update the state whenever the user interacts with the form element.

# What are uncontrolled components?
 In ReactJS, uncontrolled components are components where the form data is handled by the DOM itself rather than being managed by React state.
In an uncontrolled component, the form element manages its own state internally. 
Here Refs are used to access form input values after the user interacts with them.

# What is the difference between controlled and uncontrolled components in React ?
 In a controlled component, the value of the form elements is controlled by React. 
The component's state is used to manage the value, and any changes to the value are handled by updating the state. 
In an uncontrolled component, the value of the form elements is managed by the DOM itself, and React doesn't control or track the value

# When to Use controlled and uncontrolled components ?
Use Controlled Components::
 When you need validation, formatting, or dynamic interactions.
 For larger and complex forms.
 When you want a React-driven, predictable behavior.

Use Uncontrolled Components::
 For simple, one-off inputs (e.g., file uploads or minimal forms).
 When you need to integrate with non-React libraries or legacy code.
 Both approaches have their place, and you can even combine them in larger applications depending on specific requirements!

#  What is conditional rendering in React ?
Conditional rendering in React allows you to render different content or components based on certain conditions or state. 
It enables dynamic rendering and helps in creating responsive and interactive UIs.
-----------------------------------------------------------------------------------------------------------------------------------
:: Hooks ::

# What are hooks in React ?
 React hooks are functions that allow functional components to manage state, handle side effects, and access other React features like lifecycle methods.
Before hooks, state and lifecycle methods were only available in class components. 
Hooks make functional components more powerful. Common hooks are useState, useEffect, useContext, useReducer, useRef and Custom Hooks.

 useState: To manage state in functional components.
 useEffect: To handle side effects like data fetching or subscriptions.
 useContext: To consume React Context.
 useReducer: For complex state management, similar to Redux-like reducers.
 useRef: To access DOM elements or persist mutable values.
 Custom Hooks: Developers can create their own hooks to encapsulate reusable logic.

# Why Were Hooks Introduced ?
 1. Before hooks, functional components were stateless, managing state and lifecycle methods were available only in class components,
    but class component had complex patterns like this binding.
 2. Hooks reduce boilerplate code, which makes component more readable and easier to maintain.

#  What are the rules/ best practices that must be followed while using React Hooks ?
 1. Hooks must be called only at the top level of a componnet. 
 2. Avoid using hooks inside the loops, conditions and nested functions.
 3. Hooks are only used inside React Functional Components or Custom hooks but can not use in regular JavaScript functions.
 4. We cannot use hooks inside Class Component

# useState hook ?
 useState is a hook is used to add and manage state in functional components.
useState accept initial state and return array with 2 values first current state and second function to update the state.
It enables your component to "remember" values between renders.

#  useEffect() Hook ?
 The useEffect() Hook is used to perform side effects in functional components.
It is used to perform operations like fetching data from api, subscriptions, or directly interacting with the DOM.
The useEffect() Hook runs after every render by default.
It can also return a cleanup function to clean up effects when the component unmounts or before it re-runs the effect.
It replaces the lifecycle methods like componentDidMount(), componentDidUpdate(), and componentWillUnmount(). 

# How does useEffect() work ?
 useEffect() takes two arguments:
A callback function where we perform side effect logic.
An optional dependency array to control when the effect runs.

Without a dependency array --> Runs after every render.
With an empty dependency array --> Runs only once, When the component is render... like componentDidMount.
With specific dependencies --> Runs when the state value changes.

# What is the purpose of useContext() hooks in React ?
 useContext hook is used to access value of a React Context within a Functional Component. 
Context provides a way to share data between components without having to explicitly pass props through every level of the component tree.
This is especially useful for managing global states like user authentication or theme settings.

# What is the React Context and when is it useful?
 The React Context provides a way to pass data across/through the component tree without manually passing props down through every level. 
It is useful when you have data that needs to be accessed by multiple components at different levels in the component hierarchy.

# Can you update the context value using the useContext hook?
 No, the useContext hook is used to consume context values, not to update them. To update the context value, 
 you need to modify the provider's state and pass a new value. 

# Can you use useContext without a provider?
 No, if a component calls useContext without wrapping its parent tree in a corresponding <Provider>, 
 it will use the default value defined during the context's creation.

# What is Prop Drilling in React?
 Prop drilling means passing data (props) from a parent component down to deeply nested child components, 
 even if intermediate components do not need the data.

# What are Pure Components ?
 A Pure Component in React is a component that renders the same output for the same input props and state.
In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. 
This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. 
So it  helps optimize performance by preventing unnecessary re-renders.

 In class components, the components extending React.PureComponent instead of React.Component become the pure components.
When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method.

:: OR ::
 The PureComponent is a base class in React that automatically
implements the shouldComponentUpdate() method with a shallow prop
and state comparison. It helps in optimizing performance by preventing
unnecessary re-renders when the prop and state values haven't changed.

# What is the difference between HTML and React event handling?
 Below are some of the main differences between HTML and React event handling,

In HTML, the event name usually represents in lowercase as a convention:
<button onclick="activateLasers()"></button>

Whereas in React it follows camelCase convention:
<button onClick={activateLasers}>

In HTML, you can return false to prevent default behavior:
<a
  href="#"
  onclick='console.log("The link was clicked."); return false;'
/>

Whereas in React you must call preventDefault() explicitly:
function handleClick(event) {
  event.preventDefault();
  console.log("The link was clicked.");
}

In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name.

# What are synthetic events in React ?
 Synthetic events in React are objects that wrap native browser events to ensure consistency across different browsers. 
React uses its own event system, which is implemented as a cross-browser wrapper around the browser's native event system. 
This abstraction layer provides a unified interface to handle events in a predictable way, regardless of the browser.

 Synthetic events have properties and methods similar to the native event, like preventDefault(), stopPropagation(), and target.
Common Methods and Properties:
preventDefault(): Prevents the default action of the event.
stopPropagation(): Stops the event from bubbling up the DOM tree.
target: Refers to the element that triggered the event.

{ Unified Interface: Synthetic events provide a consistent API for all event types, similar to the DOM Event interface. 
This makes it easier to write cross-browser-compatible event handling code. }

# What are Higher-Order Components ?
 Higher-Order Components (HOCs) in React are advanced techniques for reusing component logic. A Higher-Order Component is a component
that takes a component as an argument and returns a new component. It is used to add reusable functionality to components.
It is similar to the design pattern of higher-order functions in JavaScript.
We call them pure components because They do not mutate the original component but return a new one.

# realtime example of HOC ?
 HOCs can be used in real-world scenarios, such as restricting access to certain parts of an application based on user authentication status.
Incase if we want to restrict access to a dashboard component. Only authenticated users should be able to view it. 
If a user is not authenticated, they should be redirected to a login page.

# Why React uses className over class attribute ?
  React uses the className attribute over the class attribute primarily to avoid conflicts with JavaScript's reserved keyword class.

# What are stateless components ?
 stateless components are functional components that do not manage or maintain state. 
They simply take props and render UI based on those props. Stateless components are simple and efficient because 
they do not have to manage state or lifecycle methods.

# What are stateful components in reactjs ?
 Stateful components in ReactJS are components that manage and maintain their own state.  
Stateful components allow you to track dynamic data over time and can re-render the component when that state changes.
The state in a React component is a JavaScript object that determines how the component renders and behaves.

 Stateful components hold local state that can be updated based on user actions or other events. 
For example, when a user inputs data, clicks a button, or performs an action that modifies the component's state.

# Manage State in Class Component ?
 Previously, stateful components were built using class components with state and this.setState() methods.

# How to use styles in React ?
 The style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. 
This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.

# How do you conditionally render components ?
 Using && Operator and Using Conditional Rendering Elements

# Why should component names start with capital letter ?
 developers can easily differentiate between HTML elements and React components.
---------------------------------------------------------------------------------------------------------------------------
::: Redux :::

# is redux and redux toolkit are different

Yes, Redux and Redux Toolkit are related but different:
Redux ::
 Redux is a state management library for JavaScript applications, particularly useful in React.
It provides a predictable state container for managing and updating the application state in a consistent way.
Redux requires developers to write a lot of boilerplate code, including actions, reducers, and store setup.

Redux Toolkit ::
 Redux Toolkit is the official, recommended way to write Redux logic, simplifying the process of working with Redux.
It provides utility functions that help reduce the boilerplate code, such as createSlice, configureStore, and createAsyncThunk.
It encourages best practices and is designed to make Redux development faster and easier.
In short, Redux Toolkit is built on top of Redux and makes it easier and more efficient to work with Redux. 
It simplifies Redux patterns and reduces the complexity that comes with setting up and using Redux in an application.
---------------------------------------------------------------------------------------------------------------------------

:: Understand Key Concepts ::
	State: The data or variables your application uses.
	Action: A plain object describe events in the application.
	Reducer: A function that updates the state based on the action.
	Store: A centralized place to store your app's state.
	useSelector: A hook to access the Redux state in a component.
	useDispatch: A hook to dispatch actions (e.g., increment or decrement).
	Slice: A collection of reducer logic and actions for a single feature, introduced by Redux Toolkit for simplicity.
	createSlice: Combines actions and reducers in one place.
	state: The current state of the slice.
	action: The action object, which contains a payload (for successful actions) or an error (for failed actions).

:: Redux --> Steps
   1. Configure / create Store
   2. Provide the Redux Store to app.js
   3. Create a Redux State Slice -->  import the createSlice API from Redux Toolkit.
Creating a slice requires a string name to identify the slice, an initial state value, and one or more reducer functions to define how the state can be updated.
   4. Add Slice Reducers to the Store
   5. Use Redux State and Actions in React Components

Summary ::
  Create a Redux store with configureStore
	configureStore accepts a reducer function as a named argument
	configureStore automatically sets up the store with good default settings
  Provide the Redux store to the React application components
	Put a React-Redux <Provider> component around your <App />
	Pass the Redux store as <Provider store={store}>
  Create a Redux "slice" reducer with createSlice
	Call createSlice with a string name, an initial state, and named reducer functions
	Reducer functions may "mutate" the state using Immer
	Export the generated slice reducer and action creators
  Use the React-Redux useSelector/useDispatch hooks in React components
	Read data from the store with the useSelector hook
	Get the dispatch function with the useDispatch hook, and dispatch actions as needed
	
::: Flow of Redux ::
  When you click the buttons:
	The dispatch sends an action (e.g., { type: 'counter/increment' }) to the store.
	The store uses the counterSlice.reducer to update the state.
	The useSelector hook retrieves the updated state, and React re-renders the component with the new state.

---------------------------------------------------------------------------------------------------------------------------

Note : HTML, form data usually handled by the DOM.
       React, Form data usually handled by the Component.

Note : In Simple application --> we use Browser Router
       In Complex application --> we use Create Browser Router (React Router Dom)

Note : Why Use [name] in the [ ] during Form Handling?
	Computed Property Names ::
	In JavaScript, when you use square brackets ([ ]) inside an object, it allows you to compute the key dynamically. 
	This is called computed property names.

       Why Is name Important in React?
	Dynamic Key for State Updates:
	It allows you to handle multiple inputs with a single state and onChange handler.
	Without the name attribute, you'd need separate handlers for each input.

   Uncontrolled Components
	Use ref to directly access DOM elements for form data.

   When to Use useNavigate?
	Redirect the user after a form submission.
	Navigate based on some logic (e.g., if a user is logged in, go to the dashboard).
	Replace navigation without reloading the page.


